ifelse(word_len > 6, RT,
ifelse(word_len > 8, RT + 100,
RT + 200))),
RT = ifelse(RT < 95, sample(c(110:534), 1), RT),
X1 = 1:nrow(catdog_spr)
) %>%
select(X1, participant, item_type, sentence_num, cond, word, RT, full_sentence)
participant_data <- tibble(participant = c("Par_A", "Par_B", "Par_C", "Par_D", "Par_E", "Par_F", "Par_G", "Par_H", "Par_I", "Par_J", "Par_K", "Par_M"),
age = c(24, 28, 18, 32, 36, 25, 21, 68, 34, 22, 28, 33),
nationality = c("US", "US", "UK", "US", "UK", "UK", "UK", "US", "DE", "UK", "US", "US"),
pet_interest = c(2, 3, 4, 3, 1, 4, 3, 2, 5, 4, 3, 4),
gender = c("female","male","female","male","female","female","male","female","nonbinary","male","male","female"),
education = c(4, 2, 3, 3, 1, 2, 2, 3, 2, 2, 3, 4),
preference = c("cats", "cats", "dogs", "cats", "cats", "cats", "dogs", "cats", "cats", "dogs", "cats", "dogs"))
write_csv(catdog_spr, "dgfs_spr.csv")
write_csv(participant_data, "dgfs_pars.csv")
ggplot(data=catdog_spr, aes(x=participant, y=RT)) +
geom_boxplot()
ggplot(data=catdog_spr, aes(x=cond, y=RT)) +
geom_boxplot()
full_data <- participant_data %>%
pivot_longer(participant, values_to="participant") %>%
full_join(catdog_spr)
ggplot(data=full_data, aes(x=gender, y=RT)) +
geom_boxplot()
full_data %>%
group_by(pet_interest) %>%
summarize(avg_RT = mean(RT)) %>%
ggplot(aes(x=pet_interest, y=avg_RT)) +
geom_col()
ggplot(data=full_data, aes(x=nationality, y=RT)) +
geom_boxplot()
full_data %>%
group_by(education) %>%
summarize(avg_RT = mean(RT)) %>%
ggplot(aes(x=education, y=avg_RT)) +
geom_col()
mean(catdog_spr$RT)
range(catdog_spr$RT)
ggplot(data=full_data, aes(x=RT)) +
geom_histogram(bins = 40) +
geom_vline(aes(xintercept=175))
library(tidyverse)
animal_corpus <- data.frame(
collocate = c(rep("tom_np1", 9), #cat collocates
rep("tom_nn1", 8),
rep("siamese_jj", 17),
rep("tortoiseshell_nn1", 9),
rep("ginger_jj", 8),
rep("purring_jj", 5),
rep("purring_vvg", 1),
rep("playing_vvg", 4),
rep("because_cs", 5),
rep("contented_jj", 4),
#dog:
rep("guide_nn1", 60),
rep("guide_vv0", 7),
rep("guide_vvi", 1),
rep("mad_jj", 52),
rep("barking_jj", 7),
rep("barking_vvg", 1),
rep("barking_np1", 1),
rep("has_vhz", 19),
rep("lap_nn1", 17),
rep("dangerous_jj", 24),
rep("best_jjt", 4)),
animal = c(rep("cat", 70), rep("dog", 193))
)
## add:
# to randomise the order of the rows:
rows <- sample(nrow(animal_corpus))
animal_corpus <- animal_corpus[rows, ]
## Design:
## cond_a is matching collocates (5 about cats, 5 about dogs),
## cond_b is mismatching collocates (5 with dog collocates + cat, 5 with cat collocates + dog)
library(tidytext)
set.seed(2021)
sentence_array <- c("This is a practice sentence to get you used to reading sentences like this.",
"Please read as normally as possible.",
"The experiment will start on the next sentence.",
"Mary saw a beautiful Siamese cat on her way home from work.",
"Joshua said that purring cats are one of the most relaxing things to him.",
"There was a contented cat looking out from the bookstore window.",
"The child told me that ginger cats are by far the cutest of them all.",
"A large tom cat was often seen hanging out near the butcher shop.",
"My closest neighbor has a guide dog to help him navigate.",
"The students were worried that a mad dog had been spotted in town.",
"Although the barking dog was noisy, he was quite cute.",
"My grandmother had a lap dog that she loved very much.",
"Tracey was the best dog Jenny's family ever had.",
"Lisa has heard of Siamese dogs, but has never seen one.",
"It has been reported that purring dogs are not uncommon.",
"My best friend Jerry has a contented dog that loves to lounge around.",
"On a walk through the woods, Randy saw a ginger dog that was quite regal.",
"The baker said that he saw a tom dog on the loose by the bay.",
"Louise was interested to hear how the guide cat was adapting to his new home.",
"The entire city was talking about a mad cat that was seen digging through trash cans.",
"Poppy read in the newspaper that a barking cat had been identified.",
"The doctor had a lap cat to keep her company after her shifts.",
"Georgie was the best cat that had ever taken part in the contest.")
RT <- rep(c(
rnorm(780/12, mean=26, sd= 53), #cond_A_cat
rnorm(648/12, mean=-65, sd= 35), #cond_A_dog
rnorm(768/12, mean=356, sd = 54), #cond_B_cat
rnorm(828/12, mean=469, sd = 112), #cond_B_dog
rnorm(336/12, mean=600, sd = 70) #practice
), 12)
catdog_spr <- tibble(participant = rep(c("Par_A", "Par_B", "Par_C", "Par_D", "Par_E", "Par_F", "Par_G", "Par_H", "Par_I", "Par_J", "Par_K", "Par_M"), each = 23),
item_type = rep("DashedSentence", 276),
cond = rep(c(rep("practice", 3), rep("cond_A_cat", 5), rep("cond_A_dog", 5),  rep("cond_B_cat", 5),  rep("cond_B_dog", 5)), 12),
sentence_num = rep(1:23, 12),
full_sentence = rep(sentence_array, 12)) %>%
unnest_tokens(word, full_sentence, to_lower = FALSE, drop = FALSE) %>%
arrange(cond) %>%
mutate(word_len = nchar(word),
RT = round(RT),
RT = ifelse(participant == "Par_C", RT - 100, #young, so faster
ifelse(participant == "Par_G", RT + 200, #old
ifelse( participant == "Par_E", RT + 50, #doesnt care about pets
ifelse(participant == "Par_I", RT - 80, #cares about pets
ifelse(participant == "Par_H", RT + 500, #distracted
RT)
)))),
RT = ifelse(cond == "cond_B_cat", RT + 210,
ifelse(cond == "practice", RT + 278,
ifelse(cond == "cond_A_cat", RT - 27,
ifelse(cond == "cond_A_dog", RT - 113,
ifelse(cond == "cond_B_dog", RT + 410,
RT)
)))),
RT = ifelse(word_len > 4, RT - 100,
ifelse(word_len > 6, RT,
ifelse(word_len > 8, RT + 100,
RT + 200))),
RT = ifelse(RT < 95, sample(c(110:334), 1), RT),
X1 = 1:nrow(catdog_spr)
) %>%
select(X1, participant, item_type, sentence_num, cond, word, RT, full_sentence)
participant_data <- tibble(participant = c("Par_A", "Par_B", "Par_C", "Par_D", "Par_E", "Par_F", "Par_G", "Par_H", "Par_I", "Par_J", "Par_K", "Par_M"),
age = c(24, 28, 18, 32, 36, 25, 21, 68, 34, 22, 28, 33),
nationality = c("US", "US", "UK", "US", "UK", "UK", "UK", "US", "DE", "UK", "US", "US"),
pet_interest = c(2, 3, 4, 3, 1, 4, 3, 2, 5, 4, 3, 4),
gender = c("female","male","female","male","female","female","male","female","nonbinary","male","male","female"),
education = c(4, 2, 3, 3, 1, 2, 2, 3, 2, 2, 3, 4),
preference = c("cats", "cats", "dogs", "cats", "cats", "cats", "dogs", "cats", "cats", "dogs", "cats", "dogs"))
write_csv(catdog_spr, "dgfs_spr.csv")
write_csv(participant_data, "dgfs_pars.csv")
ggplot(data=catdog_spr, aes(x=participant, y=RT)) +
geom_boxplot()
ggplot(data=catdog_spr, aes(x=cond, y=RT)) +
geom_boxplot()
full_data <- participant_data %>%
pivot_longer(participant, values_to="participant") %>%
full_join(catdog_spr)
ggplot(data=full_data, aes(x=gender, y=RT)) +
geom_boxplot()
full_data %>%
group_by(pet_interest) %>%
summarize(avg_RT = mean(RT)) %>%
ggplot(aes(x=pet_interest, y=avg_RT)) +
geom_col()
ggplot(data=full_data, aes(x=nationality, y=RT)) +
geom_boxplot()
full_data %>%
group_by(education) %>%
summarize(avg_RT = mean(RT)) %>%
ggplot(aes(x=education, y=avg_RT)) +
geom_col()
mean(catdog_spr$RT)
range(catdog_spr$RT)
ggplot(data=full_data, aes(x=RT)) +
geom_histogram(bins = 40) +
geom_vline(aes(xintercept=175))
library(tidyverse)
animal_corpus <- data.frame(
collocate = c(rep("tom_np1", 9), #cat collocates
rep("tom_nn1", 8),
rep("siamese_jj", 17),
rep("tortoiseshell_nn1", 9),
rep("ginger_jj", 8),
rep("purring_jj", 5),
rep("purring_vvg", 1),
rep("playing_vvg", 4),
rep("because_cs", 5),
rep("contented_jj", 4),
#dog:
rep("guide_nn1", 60),
rep("guide_vv0", 7),
rep("guide_vvi", 1),
rep("mad_jj", 52),
rep("barking_jj", 7),
rep("barking_vvg", 1),
rep("barking_np1", 1),
rep("has_vhz", 19),
rep("lap_nn1", 17),
rep("dangerous_jj", 24),
rep("best_jjt", 4)),
animal = c(rep("cat", 70), rep("dog", 193))
)
## add:
# to randomise the order of the rows:
rows <- sample(nrow(animal_corpus))
animal_corpus <- animal_corpus[rows, ]
## Design:
## cond_a is matching collocates (5 about cats, 5 about dogs),
## cond_b is mismatching collocates (5 with dog collocates + cat, 5 with cat collocates + dog)
library(tidytext)
set.seed(2021)
sentence_array <- c("This is a practice sentence to get you used to reading sentences like this.",
"Please read as normally as possible.",
"The experiment will start on the next sentence.",
"Mary saw a beautiful Siamese cat on her way home from work.",
"Joshua said that purring cats are one of the most relaxing things to him.",
"There was a contented cat looking out from the bookstore window.",
"The child told me that ginger cats are by far the cutest of them all.",
"A large tom cat was often seen hanging out near the butcher shop.",
"My closest neighbor has a guide dog to help him navigate.",
"The students were worried that a mad dog had been spotted in town.",
"Although the barking dog was noisy, he was quite cute.",
"My grandmother had a lap dog that she loved very much.",
"Tracey was the best dog Jenny's family ever had.",
"Lisa has heard of Siamese dogs, but has never seen one.",
"It has been reported that purring dogs are not uncommon.",
"My best friend Jerry has a contented dog that loves to lounge around.",
"On a walk through the woods, Randy saw a ginger dog that was quite regal.",
"The baker said that he saw a tom dog on the loose by the bay.",
"Louise was interested to hear how the guide cat was adapting to his new home.",
"The entire city was talking about a mad cat that was seen digging through trash cans.",
"Poppy read in the newspaper that a barking cat had been identified.",
"The doctor had a lap cat to keep her company after her shifts.",
"Georgie was the best cat that had ever taken part in the contest.")
RT <- rep(c(
rnorm(780/12, mean=26, sd= 53), #cond_A_cat
rnorm(648/12, mean=-65, sd= 35), #cond_A_dog
rnorm(768/12, mean=356, sd = 54), #cond_B_cat
rnorm(828/12, mean=469, sd = 112), #cond_B_dog
rnorm(336/12, mean=600, sd = 70) #practice
), 12)
catdog_spr <- tibble(participant = rep(c("Par_A", "Par_B", "Par_C", "Par_D", "Par_E", "Par_F", "Par_G", "Par_H", "Par_I", "Par_J", "Par_K", "Par_M"), each = 23),
item_type = rep("DashedSentence", 276),
cond = rep(c(rep("practice", 3), rep("cond_A_cat", 5), rep("cond_A_dog", 5),  rep("cond_B_cat", 5),  rep("cond_B_dog", 5)), 12),
sentence_num = rep(1:23, 12),
full_sentence = rep(sentence_array, 12)) %>%
unnest_tokens(word, full_sentence, to_lower = FALSE, drop = FALSE) %>%
arrange(cond) %>%
mutate(word_len = nchar(word),
RT = round(RT),
RT = ifelse(participant == "Par_C", RT - 100, #young, so faster
ifelse(participant == "Par_G", RT + 200, #old
ifelse( participant == "Par_E", RT + 50, #doesnt care about pets
ifelse(participant == "Par_I", RT - 80, #cares about pets
ifelse(participant == "Par_H", RT + 500, #distracted
RT)
)))),
RT = ifelse(cond == "cond_B_cat", RT + 210,
ifelse(cond == "practice", RT + 278,
ifelse(cond == "cond_A_cat", RT - 27,
ifelse(cond == "cond_A_dog", RT - 113,
ifelse(cond == "cond_B_dog", RT + 410,
RT)
)))),
RT = ifelse(word_len > 4, RT - 100,
ifelse(word_len > 6, RT,
ifelse(word_len > 8, RT + 100,
RT + 200))),
RT = ifelse(RT < 95, sample(c(110:284), 1), RT),
X1 = 1:nrow(catdog_spr)
) %>%
select(X1, participant, item_type, sentence_num, cond, word, RT, full_sentence)
participant_data <- tibble(participant = c("Par_A", "Par_B", "Par_C", "Par_D", "Par_E", "Par_F", "Par_G", "Par_H", "Par_I", "Par_J", "Par_K", "Par_M"),
age = c(24, 28, 18, 32, 36, 25, 21, 68, 34, 22, 28, 33),
nationality = c("US", "US", "UK", "US", "UK", "UK", "UK", "US", "DE", "UK", "US", "US"),
pet_interest = c(2, 3, 4, 3, 1, 4, 3, 2, 5, 4, 3, 4),
gender = c("female","male","female","male","female","female","male","female","nonbinary","male","male","female"),
education = c(4, 2, 3, 3, 1, 2, 2, 3, 2, 2, 3, 4),
preference = c("cats", "cats", "dogs", "cats", "cats", "cats", "dogs", "cats", "cats", "dogs", "cats", "dogs"))
write_csv(catdog_spr, "dgfs_spr.csv")
write_csv(participant_data, "dgfs_pars.csv")
ggplot(data=catdog_spr, aes(x=participant, y=RT)) +
geom_boxplot()
ggplot(data=catdog_spr, aes(x=cond, y=RT)) +
geom_boxplot()
full_data <- participant_data %>%
pivot_longer(participant, values_to="participant") %>%
full_join(catdog_spr)
ggplot(data=full_data, aes(x=gender, y=RT)) +
geom_boxplot()
full_data %>%
group_by(pet_interest) %>%
summarize(avg_RT = mean(RT)) %>%
ggplot(aes(x=pet_interest, y=avg_RT)) +
geom_col()
ggplot(data=full_data, aes(x=nationality, y=RT)) +
geom_boxplot()
full_data %>%
group_by(education) %>%
summarize(avg_RT = mean(RT)) %>%
ggplot(aes(x=education, y=avg_RT)) +
geom_col()
mean(catdog_spr$RT)
range(catdog_spr$RT)
ggplot(data=full_data, aes(x=RT)) +
geom_histogram(bins = 40) +
geom_vline(aes(xintercept=175))
ggplot(data=full_data, aes(x=RT)) +
geom_histogram(bins = 50) +
geom_vline(aes(xintercept=175))
spr_data <- read_csv("data/dgfs_spr.csv")
spr_data <- read_csv("data/dgfs_spr.csv")
head(spr_data)
head(spr_data, n=3)
colnames(spr_data)
summary(spr_data)
summary(spr_data$RT)
spr_data$participant <- as_factor(spr_data$participant)
spr_data$item_type <- as_factor(spr_data$item_type)
spr_data$cond <- as_factor(spr_data$cond)
summary(spr_data$participant)
summary(spr_data$cond)
spr_data %>%
head()
# Equivalent to summary(spr_data)
spr_data %>%
summary()
# Equivalent to colnames(spr_data), which returns all column names
colnames(spr_data)
spr_data %>%
colnames()
# Equivalent to nrow(spr_data), which returns the number of rows in the df
nrow(spr_data)
spr_data %>%
nrow()
spr_data %>%
relocate(participant, sentence, word)
spr_data <- spr_data %>%
rename(condition = cond,
sentence = full_sentence)
spr_data %>%
relocate(participant, sentence, word)
spr_data %>%
relocate(word_num, .after = word) %>%
relocate(sentence, .before = sentence_num)
spr_data %>%
#relocate(word_num, .after = word) %>%
relocate(sentence, .before = sentence_num)
spr_data %>%
relocate(where(is.character))
spr_data %>%
relocate(where(is.factor))
spr_data %>%
relocate(where(is.numeric))
spr_data %>%
relocate(where(is.character))
spr_data %>%
relocate(where(is.factor))
spr_data %>%
relocate(where(is.numeric))
spr_data %>%
arrange(RT)
spr_data %>%
arrange(desc(RT))
spr_data %>%
arrange(RT)
spr_data %>%
arrange(desc(RT))
spr_data %>%
select(RT)
spr_data %>%
select(RT) %>%
summary()
spr_data %>%
select(RT) %>%
max()
spr_data %>%
select(RT) %>%
min()
spr_data %>%
select(word, word_num, RT)
spr_data %>%
select(word, RT, sentence)
spr_data %>%
select(participant, word, RT)
spr_data %>%
select(RT, word, participant)
```{r}
spr_data %>%
select(RT, everything())
spr_data <- spr_data %>%
select(-item_type)
spr_data %>%
select(-item_type)
hello <- "hi"
Hello
spr_data <- spr_data %>%
select(-c(item_type, X1))
hello <- "hi"
Hello
spr_data <- read_csv("data/dgfs_spr.csv")
hello <- "hi"
Hello
spr_data %>%
select(ends_with("_num"))
spr_data %>%
select(starts_with("sentence"))
spr_data %>%
select(starts_with("type"))
library(tidyverse)
library(stringr)
library(corrplot)
spr_anon <- read_tsv("anon_data/spr_anon.txt") %>%
rename(age = age.y) %>%
select(-c("English speaking Monolingual", "First Language", "Literacy Difficulties", "Were you raised monolingual?", "Bilingual", "Language related disorders", "bilingual", "Sex", "Nationality", "age.x", "question_identifier", "Country of Birth", "Current Country of Residence", "Employment Status", "Student Status", "Highest education level completed", "Ethnicity", "Fluent languages", "Gender identity", "Handedness", num_approvals, num_rejections, prolific_score, started_datetime, completed_date_time, reviewed_at_datetime, entered_code, time_started, status, time_taken, axcpt_version, repeats, reading_disability, nativelang))
critical_region %>%
filter(is.na(vocab1_correct)) %>%
distinct(id)
library(tidyverse)
library(stringr)
library(corrplot)
spr_anon <- read_tsv("anon_data/spr_anon.txt") %>%
rename(age = age.y) %>%
select(-c("English speaking Monolingual", "First Language", "Literacy Difficulties", "Were you raised monolingual?", "Bilingual", "Language related disorders", "bilingual", "Sex", "Nationality", "age.x", "question_identifier", "Country of Birth", "Current Country of Residence", "Employment Status", "Student Status", "Highest education level completed", "Ethnicity", "Fluent languages", "Gender identity", "Handedness", num_approvals, num_rejections, prolific_score, started_datetime, completed_date_time, reviewed_at_datetime, entered_code, time_started, status, time_taken, axcpt_version, repeats, reading_disability, nativelang))
library(tidyverse)
library(stringi) #for random strings
big5 <- read_tsv("Big5_UTF8.txt") #if theres an error resave with encoding utf-8
colnames(big5) <- stringr::str_trim(colnames(big5))
big5_tidy <- big5 %>%
pivot_longer(
-prolific_id,
names_to = c(".value", "question"),
names_sep = "_"
) %>%
separate(
big5,
into=c("construct", "value"),
sep="_"
) %>%
mutate(value = as.numeric(value), construct = as.factor(construct))
big5_sums <- big5_tidy %>%
group_by(prolific_id, construct) %>%
summarize(total = sum(value)) %>%
ungroup()
big5_wide <- big5_sums %>%
pivot_wider(
id_cols = prolific_id,
names_from = construct,
values_from = total
) %>%
select(prolific_id:O) %>%
drop_na(prolific_id) %>%
transmute(prolific_id = as.factor(prolific_id), big5_O = as.numeric(O), big5_C = as.numeric(C), big5_E = as.numeric(E), big5_A = as.numeric(A), big5_N = as.numeric(N))
rm("big5", "big5_sums", "big5_tidy")
#Join the aggregate data
aggregates <- read_csv("aggregates.csv")
#change the total time for Ravens to NA for participants who were added by hand
aggregates$ravens_total_time <- ifelse(aggregates$id %in% c("5dccf219aa4314964f7461d9", "5dbbb58c03a8561923e97d90", "5e0e4f0353e8465b05b8a6fc", "5d68c8aa40524c00189e8ac2"), NA, aggregates$ravens_total_time)
#two couldn't be added by hand becuase they are missing an item: 5bc58a439d9a7c0001cfa90e (D B E A F E C C B F B), 5b661bc3259daf00019369f2 (e,b,b,e,a,f,c,c,d,f,g)
#add Big5 column
inddiff <- full_join(big5_wide, aggregates, by=c("prolific_id"="id"))
#Add participant-specific data
prolific_1 <- read_csv("ProlificData/prolific_export_5e4a539d70fd6d4ad7090625.csv")
prolific_2 <- read_csv("ProlificData/prolific_export_5e7cbf8637d3333141a39017.csv")
prolific_3 <- read_csv("ProlificData/prolific_export_5e844ee1cf8941017ec85178.csv")
prolific_4 <- read_csv("ProlificData/prolific_export_5ebe51171ea97a1b072554f4.csv")
prolific <- plyr::rbind.fill(prolific_1, prolific_2, prolific_3, prolific_4)
rm("prolific_1", "prolific_2", "prolific_3", "prolific_4")
#remove participants who revoked participation
prolific <- prolific %>%
filter(status %in% c("APPROVED", "AWAITING REVIEW"))
#add column for participants who had the original AXCPT task
prolific$axcpt_version <- ifelse(prolific$completed_date_time < "2020-03-24 00:00:00", "old", "new")
#also join the info collected on the site (SQL database)
participants <- read_csv("participants.csv")
colnames(participants) <- stringr::str_trim(colnames(participants))
#remove unncessary columns
participants <- participants %>%
select(-c(internal_id, ip, J, K, L, M, N, O, P, Q, R, ibex, jspsych, jspsych_progress, progress))%>%
mutate_all(stringr::str_trim)
participant_info <- full_join(prolific, participants, by= c("participant_id" = "prolific_id"))
rm("participants", "prolific")
#remove unneccessary columns
participant_info <- participant_info  %>%
select(-session_id)
#Join participant info to individual difference assessments
inddiff_par <- full_join(inddiff, participant_info, by=c("prolific_id" = "participant_id"))
inddiff_par <- inddiff_par %>%
filter(substr(prolific_id, 1, 4) != "test" & substr(prolific_id, 1, 4) != "kyla")
View(inddiff_par)
#Load original data, subsequently removing test participants
original_spr <- read_tsv("ibex/output_final.txt",
col_names = c("original_id", "type", "question_identifier", "group", "word_in_sentence", "item", "RT", "?", "full_sentence"),
) %>%
filter(substr(original_id, 1, 4) != "test" & substr(original_id, 1, 4) != "fals")
#check which IDs are in one DF and not the other
inddiff_par$prolific_id[!inddiff_par$prolific_id %in% unique(original_spr$original_id)]
original_spr$original_id[!unique(original_spr$original_id) %in% inddiff_par$prolific_id]
all_data<- left_join(original_spr, inddiff_par, by=c("original_id" = "prolific_id"))
#check which IDs are in one DF and not the other
inddiff_par$prolific_id[!inddiff_par$prolific_id %in% unique(original_spr$original_id)]
all_data %>%
left_join(id_lookup)
id_lookup <- read_csv("private_data/id_lookup.csv")
id_lookup <- read_csv("id_lookup.csv")
all_data %>%
left_join(id_lookup)
all_data <- all_data %>%
left_join(id_lookup)
View(all_data)
all_data %>%
filter(id=="BM100")
all_data <- all_data %>%
select(-original_id)
write_tsv(all_data, "../anon_data/data_anon.txt")
